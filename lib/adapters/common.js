// Generated by CoffeeScript 1.9.3
var CONSTANTS, _clone, _escape, _escapeConfigs;

_clone = function(dst, src) {
  var prop;
  for (prop in src) {
    dst[prop] = src[prop];
  }
  return dst;
};

module.exports.CONSTANTS = CONSTANTS = {
  MYSQL: 'mysql',
  POSTGRES: 'postgres'
};

_escapeConfigs = {};

_escapeConfigs[CONSTANTS.MYSQL] = {
  id: {
    quote: '`',
    matcher: /([`\\\0\n\r\b])/g,
    replace: {
      '`': '\\`',
      '\\': '\\\\',
      '\0': '\\0',
      '\n': '\\n',
      '\r': '\\r',
      '\b': '\\b'
    }
  },
  literal: {
    quote: "'",
    matcher: /(['\\\0\n\r\b])/g,
    replace: {
      "'": "\\'",
      '\\': '\\\\',
      '\0': '\\0',
      '\n': '\\n',
      '\r': '\\r',
      '\b': '\\b'
    }
  },
  search: {
    quoteStart: "'%",
    quoteEnd: "%'",
    matcher: /(['\\\0\n\r\b])/g,
    replace: {
      "'": "''",
      '\0': '\\0',
      '\n': '\\n',
      '\r': '\\r',
      '\b': '\\b',
      '%': '!%',
      '_': '!_',
      '!': '!!'
    }
  }
};

_escapeConfigs[CONSTANTS.MYSQL].begin = _clone({}, _escapeConfigs[CONSTANTS.MYSQL].search);

_escapeConfigs[CONSTANTS.MYSQL].begin.quoteStart = "'";

_escapeConfigs[CONSTANTS.MYSQL].end = _clone({}, _escapeConfigs[CONSTANTS.MYSQL].search);

_escapeConfigs[CONSTANTS.MYSQL].end.quoteEnd = "'";

_escapeConfigs[CONSTANTS.POSTGRES] = {
  id: {
    quote: '"',
    matcher: /(["\\\0\n\r\b])/g,
    replace: {
      '"': '""',
      '\0': '\\0',
      '\n': '\\n',
      '\r': '\\r',
      '\b': '\\b'
    }
  },
  literal: {
    quote: "'",
    matcher: /(['\\\0\n\r\b])/g,
    replace: {
      "'": "''",
      '\0': '\\0',
      '\n': '\\n',
      '\r': '\\r',
      '\b': '\\b'
    }
  },
  search: {
    quoteStart: "'%",
    quoteEnd: "%'",
    matcher: /(['\\\0\n\r\b])/g,
    replace: {
      "'": "''",
      '\0': '\\0',
      '\n': '\\n',
      '\r': '\\r',
      '\b': '\\b',
      '%': '!%',
      '_': '!_',
      '!': '!!'
    }
  }
};

_escapeConfigs[CONSTANTS.POSTGRES].begin = _clone({}, _escapeConfigs[CONSTANTS.POSTGRES].search);

_escapeConfigs[CONSTANTS.POSTGRES].begin.quoteStart = "'";

_escapeConfigs[CONSTANTS.POSTGRES].end = _clone({}, _escapeConfigs[CONSTANTS.POSTGRES].search);

_escapeConfigs[CONSTANTS.POSTGRES].end.quoteEnd = "'";

module.exports._escapeConfigs = _escapeConfigs;

module.exports._escape = _escape = function(str, opts) {
  var i, iStr, len, ret, type;
  type = typeof str;
  if (type === 'number') {
    return str;
  }
  if (type === 'boolean') {
    if (type) {
      return '1';
    } else {
      return '0';
    }
  }
  if (Array.isArray(str)) {
    ret = [];
    for (i = 0, len = str.length; i < len; i++) {
      iStr = str[i];
      ret[ret.length] = _escape(iStr, opts);
    }
    return '(' + ret.join(', ') + ')';
  }
  if ('string' !== type) {
    str = '' + str;
  }
  str = str.replace(opts.matcher, function(match, char, index, str) {
    return opts.replace[char];
  });
  return (opts.quoteStart || opts.quote) + str + (opts.quoteEnd || opts.quote);
};

module.exports.exprNotEqual = function(value, escapeColumn) {
  if (value === null) {
    return escapeColumn + ' IS NOT NULL';
  } else {
    return escapeColumn + ' IS NULL OR ' + escapeColumn + ' <> ' + this.escape(value);
  }
};

module.exports.exprEqual = function(value, escapeColumn) {
  if (value === null) {
    return escapeColumn + ' IS NULL';
  } else {
    return escapeColumn + ' = ' + this.escape(value);
  }
};
