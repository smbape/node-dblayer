// Generated by CoffeeScript 1.9.2
(function() {
  var PostgresClient, PostgresQueryStream, QueryStream, _, adapter, logger, pg,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  pg = require('pg');

  QueryStream = require('pg-query-stream');

  _ = require('lodash');

  logger = log4js.getLogger('PostgresAdapter');

  adapter = module.exports;

  _.extend(adapter, require('./common'));

  PostgresClient = (function(superClass) {
    extend(PostgresClient, superClass);

    PostgresClient.prototype.adapter = adapter;

    function PostgresClient(options) {
      this.options = _.clone(options);
      this.options.schema = this.options.schema || 'public';
      PostgresClient.__super__.constructor.apply(this, arguments);
    }

    PostgresClient.prototype.query = function(query, params, callback) {
      query = this.adapter.createQuery(query, params, callback);
      return PostgresClient.__super__.query.call(this, query);
    };

    PostgresClient.prototype.stream = function(query, params, callback, done) {
      var hasError, result, stream;
      if (arguments.length === 3) {
        done = callback;
        callback = params;
        params = [];
      }
      if (!(params instanceof Array)) {
        params = [];
      }
      if (typeof done !== 'function') {
        done = (function() {});
      }
      query = new PostgresQueryStream(query);
      stream = pg.Client.prototype.query.call(this, query, params);
      hasError = false;
      result = {
        rowCount: 0
      };
      stream.once('error', function(err) {
        hasError = err;
        return done(err);
      });
      stream.on('fields', function(fields) {
        result.fields = fields;
      });
      stream.on('data', function() {
        ++result.rowCount;
        callback.apply(null, arguments);
      });
      stream.once('end', function() {
        if (!hasError) {
          done(void 0, result);
        }
      });
      return stream;
    };

    return PostgresClient;

  })(pg.Client);

  PostgresQueryStream = (function(superClass) {
    extend(PostgresQueryStream, superClass);

    function PostgresQueryStream(text, params, callback) {
      var errored;
      if (typeof params === 'function') {
        callback = params;
        params = [];
      }
      if (!params) {
        params = [];
      }
      QueryStream.call(this, text, params);
      this.callback = callback;
      if (typeof callback === 'function') {
        errored = false;
        this.on('error', function(err) {
          errored = true;
          this.callback(err);
        });
        this.on('data', function(row) {
          this._result.rowCount = this._result.rows.push(row);
        });
        this.on('end', function() {
          if (!errored) {
            this.callback(null, this._result);
          }
        });
      }
    }

    PostgresQueryStream.prototype.handleRowDescription = function(message) {
      QueryStream.prototype.handleRowDescription.call(this, message);
      this.emit('fields', message.fields);
    };

    PostgresQueryStream.prototype.handleReadyForQuery = function() {
      return PostgresQueryStream.__super__.handleReadyForQuery.apply(this, arguments);
    };

    PostgresQueryStream.prototype.handleError = function(err) {
      this.push(null);
      return PostgresQueryStream.__super__.handleError.apply(this, arguments);
    };

    return PostgresQueryStream;

  })(QueryStream);

  _.extend(adapter, {
    name: 'postgres',
    createConnection: function(options, callback) {
      var client;
      if (typeof callback !== 'function') {
        callback = (function() {});
      }
      client = new PostgresClient(options);
      client.connect(function(err, connection) {
        if (err) {
          return callback(err);
        }
        return connection.query("set schema '" + connection.options.schema + "'", function(err, result) {
          if (err) {
            connection.end();
            return callback(err);
          }
          return callback(err, connection);
        });
      });
      return client;
    },
    createQuery: function(text, params, callback) {
      return new PostgresQueryStream(text, params, callback);
    },
    escape: function(str) {
      var type;
      type = typeof str;
      if (type === 'number') {
        return str;
      }
      if (type === 'boolean') {
        if (type) {
          return '1';
        } else {
          return '0';
        }
      }
      return PostgresClient.prototype.escapeLiteral(str);
    },
    escapeId: PostgresClient.prototype.escapeIdentifier
  });

}).call(this);
