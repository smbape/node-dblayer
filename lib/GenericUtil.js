// Generated by CoffeeScript 1.9.0
(function() {
  var factory;

  factory = function(require) {
    var GenericUtil, hasOwnProperty, toString;
    toString = {}.toString;
    hasOwnProperty = Object.prototype.hasOwnProperty;
    GenericUtil = {
      isNumeric: function(obj) {
        return !Array.isArray(obj) && (obj - parseFloat(obj) + 1) >= 0;
      },
      isObject: function(obj) {
        return typeof obj === 'object' && obj !== null;
      },
      notEmptyString: function(str) {
        return typeof str === 'string' && str.length > 0;
      }
    };
    (function(sql) {
      var STATIC, _escape, _escapeMap;
      STATIC = {
        MYSQL: 'mysql',
        POSTGRES: 'postgres'
      };
      _escapeMap = {};
      _escapeMap[STATIC.MYSQL] = {
        id: {
          quote: '`',
          matcher: /([`\\\0\n\r\b])/g,
          replace: {
            '`': '\\`',
            '\\': '\\\\',
            '\0': '\\0',
            '\n': '\\n',
            '\r': '\\r',
            '\b': '\\b'
          }
        },
        literal: {
          quote: "'",
          matcher: /(['\\\0\n\r\b])/g,
          replace: {
            "'": "\\'",
            '\\': '\\\\',
            '\0': '\\0',
            '\n': '\\n',
            '\r': '\\r',
            '\b': '\\b'
          }
        }
      };
      _escapeMap[STATIC.POSTGRES] = {
        id: {
          quote: '"',
          matcher: /(["\\\0\n\r\b])/g,
          replace: {
            '"': '""',
            '\0': '\\0',
            '\n': '\\n',
            '\r': '\\r',
            '\b': '\\b'
          }
        },
        literal: {
          quote: "'",
          matcher: /(['\\\0\n\r\b])/g,
          replace: {
            "'": "''",
            '\0': '\\0',
            '\n': '\\n',
            '\r': '\\r',
            '\b': '\\b'
          }
        }
      };
      _escape = function(str, map) {
        var iStr, ret, type, _i, _len;
        type = typeof str;
        if (type === 'number') {
          return str;
        }
        if (type === 'boolean') {
          if (type) {
            return '1';
          } else {
            return '0';
          }
        }
        if (Array.isArray(str)) {
          ret = [];
          for (_i = 0, _len = str.length; _i < _len; _i++) {
            iStr = str[_i];
            ret[ret.length] = _escape(iStr, map);
          }
          return '(' + ret.join(', ') + ')';
        }
        if ('string' !== type) {
          str = '' + str;
        }
        str = str.replace(map.matcher, function(match, char, index, str) {
          return map.replace[char];
        });
        return map.quote + str + map.quote;
      };
      sql.escapeId = function(str, dialect) {
        if (dialect == null) {
          dialect = STATIC.POSTGRES;
        }
        return _escape(str, _escapeMap[dialect].id);
      };
      sql.escape = function(str, dialect) {
        if (dialect == null) {
          dialect = STATIC.POSTGRES;
        }
        return _escape(str, _escapeMap[dialect].literal);
      };
    })(GenericUtil.sql = {});
    return GenericUtil;
  };

  module.exports = factory(require);

}).call(this);
