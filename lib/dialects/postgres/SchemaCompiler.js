// Generated by CoffeeScript 1.10.0
var ColumnCompiler, PgSchemaCompiler, SchemaCompiler, _, tools,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = require('lodash');

tools = require('../../tools');

SchemaCompiler = require('../../schema/SchemaCompiler');

ColumnCompiler = require('./ColumnCompiler');

module.exports = PgSchemaCompiler = (function(superClass) {
  extend(PgSchemaCompiler, superClass);

  function PgSchemaCompiler() {
    return PgSchemaCompiler.__super__.constructor.apply(this, arguments);
  }

  PgSchemaCompiler.prototype.ColumnCompiler = ColumnCompiler;

  PgSchemaCompiler.prototype.validUpdateActions = ['no_action', 'restrict', 'cascade', 'set_null', 'set_default'];

  PgSchemaCompiler.prototype.dropColumn = function(tableName, column, options) {
    var LF, altersql, args, escapeId, indent, words;
    options = _.defaults({}, options, this.options);
    words = this.words, escapeId = this.escapeId, args = this.args, indent = this.indent, LF = this.LF;
    args.table = tableName;
    args.column = column;
    altersql = [words.alter_table, ' '];
    if (options.if_exists) {
      altersql.push(words.if_exists);
      altersql.push(' ');
    }
    altersql.push.apply(altersql, [escapeId(tableName), LF, indent, words.drop_column, ' ']);
    if (options.if_exists) {
      altersql.push(words.if_exists);
      altersql.push(' ');
    }
    altersql.push(escapeId(column));
    if (options.cascade) {
      altersql.push(' ');
      altersql.push(words.cascade);
    } else if (options.restrict) {
      altersql.push(' ');
      altersql.push(words.restrict);
    }
    return altersql.join('');
  };

  PgSchemaCompiler.prototype.diffType = function(tableName, column, oldColumnSpec, newColumnSpec) {
    var LF, altersql, args, columnCompiler, columnId, escape, escapeId, indent, newModifier, newTypeString, oldModifier, oldTypeString, options, spec, tablesql, words;
    options = _.defaults({}, options, this.options);
    words = this.words, escapeId = this.escapeId, escape = this.escape, columnCompiler = this.columnCompiler, args = this.args, indent = this.indent, LF = this.LF;
    args.table = tableName;
    args.column = column;
    columnId = escapeId(column);
    tablesql = [words.alter_table, ' '];
    if (options.if_exists) {
      tablesql.push(words.if_exists);
      tablesql.push(' ');
    }
    tablesql.push.apply(tablesql, [escapeId(tableName), LF]);
    altersql = [];
    oldTypeString = columnCompiler.getTypeString(oldColumnSpec);
    newTypeString = columnCompiler.getTypeString(newColumnSpec);
    oldModifier = columnCompiler.getColumnModifier(oldColumnSpec);
    newModifier = columnCompiler.getColumnModifier(newColumnSpec);
    if (oldTypeString !== newTypeString) {
      if (oldColumnSpec.type === 'text' && newColumnSpec.type === 'enum') {
        return;
      }
      spec = newColumnSpec;
      altersql.push([indent, words.alter_column, ' ', columnId, ' ', words.type, ' ', newTypeString].join(''));
      if (spec.defaultValue !== void 0 && spec.defaultValue !== null) {
        altersql.push([indent, words.alter_column, ' ', columnId, ' ', words.set_default, ' ', escape(spec.defaultValue)].join(''));
      } else if (spec.nullable === false) {
        altersql.push([indent, words.alter_column, ' ', columnId, ' ', words.set, ' ', words.not_null].join(''));
      } else {
        altersql.push([indent, words.alter_column, ' ', columnId, ' ', words.drop, ' ', words.not_null].join(''));
      }
      tablesql.push(altersql.join(',' + LF));
    } else if (oldModifier !== newModifier) {
      return;
    } else {
      return;
    }
    return tablesql.join('');
  };

  PgSchemaCompiler.prototype.renameConstraint = function(tableName, oldName, newName, oldTableModel, options) {
    var altersql, escapeId, words;
    if (_.isObject(tableName)) {
      tableName = tableName.name;
    }
    if (_.isObject(newName)) {
      newName = newName.name;
    }
    options = _.defaults({}, options, this.options);
    words = this.words, escapeId = this.escapeId;
    altersql = [words.alter_table];
    altersql.push.apply(altersql, [escapeId(tableName), words.rename_constraint, escapeId(oldName), words.to, escapeId(newName)]);
    return altersql.join(' ');
  };

  PgSchemaCompiler.prototype.dropConstraint = function(tableName, oldPkName, options) {
    var LF, altersql, escapeId, indent, words;
    if (_.isObject(tableName)) {
      tableName = tableName.name;
    }
    options = _.defaults({}, options, this.options);
    words = this.words, escapeId = this.escapeId, indent = this.indent, LF = this.LF;
    altersql = [words.alter_table, ' '];
    if (options.if_exists) {
      altersql.push(words.if_exists);
      altersql.push(' ');
    }
    altersql.push(escapeId(tableName));
    altersql.push.apply(altersql, [LF, indent, words.drop_constraint, ' ']);
    if (options.if_exists) {
      altersql.push(words.if_exists);
      altersql.push(' ');
    }
    altersql.push(escapeId(oldPkName));
    if (options.cascade) {
      altersql.push(' ');
      altersql.push(words.cascade);
    } else if (options.restrict) {
      altersql.push(' ');
      altersql.push(words.restrict);
    }
    return altersql.join('');
  };

  PgSchemaCompiler.prototype.renameIndex = function(tableName, oldName, newName, options) {
    var altersql, escapeId, words;
    options = _.defaults({}, options, this.options);
    words = this.words, escapeId = this.escapeId;
    altersql = [words.alter_index];
    if (options.if_exists) {
      altersql.push(words.if_exists);
    }
    altersql.push.apply(altersql, [escapeId(oldName), words.rename_to, escapeId(newName)]);
    return altersql.join(' ');
  };

  PgSchemaCompiler.prototype.dropIndex = function(tableName, indexName, options) {
    var altersql, escapeId, words;
    if (options == null) {
      options = {};
    }
    options = _.defaults({}, options, this.options);
    words = this.words, escapeId = this.escapeId;
    altersql = [words.drop_index];
    if (options.if_exists) {
      altersql.push(words.if_exists);
    }
    altersql.push(escapeId(indexName));
    if (options.cascade) {
      altersql.push(words.cascade);
    } else if (options.restrict) {
      altersql.push(words.restrict);
    }
    return altersql.join(' ');
  };

  return PgSchemaCompiler;

})(SchemaCompiler);

PgSchemaCompiler.prototype.dropPrimaryKey = PgSchemaCompiler.prototype.dropForeignKey = PgSchemaCompiler.prototype.dropUniqueIndex = PgSchemaCompiler.prototype.dropConstraint;

PgSchemaCompiler.prototype.renamePrimaryKey = PgSchemaCompiler.prototype.renameUniqueIndex = PgSchemaCompiler.prototype.renameForeignKey = PgSchemaCompiler.prototype.renameConstraint;
