// Generated by CoffeeScript 1.10.0
var ColumnCompiler, MysqlSchemaCompiler, SchemaCompiler, _, tools,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = require('lodash');

tools = require('../../tools');

SchemaCompiler = require('../../schema/SchemaCompiler');

ColumnCompiler = require('./ColumnCompiler');

module.exports = MysqlSchemaCompiler = (function(superClass) {
  extend(MysqlSchemaCompiler, superClass);

  function MysqlSchemaCompiler() {
    return MysqlSchemaCompiler.__super__.constructor.apply(this, arguments);
  }

  MysqlSchemaCompiler.prototype.ColumnCompiler = ColumnCompiler;

  MysqlSchemaCompiler.prototype.validUpdateActions = ['no_action', 'restrict', 'cascade', 'set_null'];

  MysqlSchemaCompiler.prototype.dropColumn = function(tableName, column, options) {
    var LF, escapeId, indent, words;
    words = this.words, escapeId = this.escapeId, indent = this.indent, LF = this.LF;
    return words.alter_table + ' ' + escapeId(tableName) + LF + indent + words.drop_column + ' ' + escapeId(column);
  };

  MysqlSchemaCompiler.prototype.diffType = function(tableName, column, oldColumnSpec, newColumnSpec) {
    var LF, altersql, args, columnCompiler, columnId, escapeId, indent, newModifier, newTypeString, oldModifier, oldTypeString, options, tablesql, words;
    options = _.defaults({}, options, this.options);
    words = this.words, escapeId = this.escapeId, columnCompiler = this.columnCompiler, args = this.args, indent = this.indent, LF = this.LF;
    args.table = tableName;
    args.column = column;
    columnId = escapeId(column);
    tablesql = [words.alter_table, ' '];
    if (options.if_exists) {
      tablesql.push(words.if_exists);
      tablesql.push(' ');
    }
    tablesql.push.apply(tablesql, [escapeId(tableName), LF]);
    altersql = [];
    oldTypeString = columnCompiler.getTypeString(oldColumnSpec);
    newTypeString = columnCompiler.getTypeString(newColumnSpec);
    oldModifier = columnCompiler.getColumnModifier(oldColumnSpec);
    newModifier = columnCompiler.getColumnModifier(newColumnSpec);
    if (oldTypeString !== newTypeString) {
      if (oldColumnSpec.type === 'enum' && newColumnSpec.type === 'enum') {
        return;
      }
      tablesql.push.apply(tablesql, [indent, words.change_column, ' ', columnId, ' ', columnId, ' ', newTypeString, ' ', newModifier]);
    } else if (oldModifier !== newModifier) {
      return;
    } else {
      return;
    }
    return tablesql.join('');
  };

  MysqlSchemaCompiler.prototype.renamePrimaryKey = function() {};

  MysqlSchemaCompiler.prototype.dropPrimaryKey = function(tableName, oldName, options) {
    var LF, escapeId, indent, words;
    options = _.defaults({}, options, this.options);
    words = this.words, escapeId = this.escapeId, indent = this.indent, LF = this.LF;
    return words.alter_table + ' ' + escapeId(tableName) + LF + indent + words.drop_primary_key;
  };

  MysqlSchemaCompiler.prototype.renameForeignKey = function(newTableModel, oldName, newKey, oldTableModel, options) {
    return this.dropForeignKey(oldTableModel, oldName, options) + ';\n' + this.addForeignKey(newTableModel, newKey, options);
  };

  MysqlSchemaCompiler.prototype.dropForeignKey = function(oldTableModel, oldName, options) {
    var LF, escapeId, indent, ref, ref1, sql, words;
    options = _.defaults({}, options, this.options);
    words = this.words, escapeId = this.escapeId, indent = this.indent, LF = this.LF;
    sql = words.alter_table + ' ' + escapeId(oldTableModel.name) + LF + indent + words.drop_foreign_key + ' ' + escapeId(oldName);
    if ((ref = oldTableModel.indexes) != null ? ref.hasOwnProperty(oldName) : void 0) {
      delete oldTableModel.indexes[oldName];
    }
    if ((ref1 = oldTableModel.constraints.UNIQUE) != null ? ref1.hasOwnProperty(oldName) : void 0) {
      delete oldTableModel.constraints.UNIQUE[oldName];
    }
    return sql;
  };

  MysqlSchemaCompiler.prototype.renameIndex = function(tableName, oldName, newName, options) {
    var LF, escapeId, indent, words;
    words = this.words, escapeId = this.escapeId, indent = this.indent, LF = this.LF;
    return words.alter_table + ' ' + escapeId(tableName) + LF + indent + words.rename_index + ' ' + escapeId(oldName) + ' ' + words.to + ' ' + escapeId(newName);
  };

  MysqlSchemaCompiler.prototype.dropIndex = function(tableName, indexName, options) {
    var LF, escapeId, indent, words;
    if (options == null) {
      options = {};
    }
    options = _.defaults({}, options, this.options);
    words = this.words, escapeId = this.escapeId, indent = this.indent, LF = this.LF;
    return words.alter_table + ' ' + escapeId(tableName) + LF + indent + words.drop_index + ' ' + escapeId(indexName);
  };

  return MysqlSchemaCompiler;

})(SchemaCompiler);

MysqlSchemaCompiler.prototype.renameUniqueIndex = MysqlSchemaCompiler.prototype.renameIndex;

MysqlSchemaCompiler.prototype.dropUniqueIndex = MysqlSchemaCompiler.prototype.dropIndex;
