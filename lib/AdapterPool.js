// Generated by CoffeeScript 1.9.0
(function() {
  var AdapterPool, GenericUtil, defaultOptions, internal, log4js, logger, path, _;

  log4js = global.log4js || (global.log4js = require('log4js'));

  logger = log4js.getLogger('AdapterPool');

  internal = {};

  internal.adapters = {};

  internal.getAdapter = function(options) {

    /* istanbul ignore else */
    var adapter, err;
    if (typeof options.adapter === 'string') {
      adapter = internal.adapters[options.adapter];
      if (typeof adapter === 'undefined') {
        adapter = require(path.join(__dirname, 'adapters', options.adapter));
        internal.adapters[options.adapter] = adapter;
      }
    }
    if (typeof adapter.createConnection !== 'function') {
      err = new Error('adapter object has no method createConnection');
      err.code = 'BAD_ADAPTER';
      throw err;
    }
    return adapter;
  };

  _ = require('lodash');

  path = require('path');

  GenericUtil = require('./GenericUtil');

  defaultOptions = {
    minConnection: 0,
    maxConnection: 1,
    idleTimeout: 10 * 60
  };

  module.exports = AdapterPool = (function() {
    function AdapterPool(connectionUrl, options, next) {
      var GenericPool, auth, err, k, method, parsed, prop, properties, url, _i, _len;
      if (typeof connectionUrl !== 'string') {
        err = new Error("'connectionUrl' must be a String");
        err.code = 'BAD_CONNECTION_URL';
        throw err;
      }
      this.connectionUrl = connectionUrl;
      url = require('url');
      parsed = url.parse(connectionUrl, true, true);
      this.options = {};
      this.options.adapter = parsed.protocol && parsed.protocol.substring(0, parsed.protocol.length - 1);
      this.options.database = parsed.pathname && parsed.pathname.substring(1);
      this.options.host = parsed.hostname;
      if (GenericUtil.isNumeric(parsed.port)) {
        this.options.port = parseInt(parsed.port, 10);
      }
      if (parsed.auth) {
        auth = parsed.auth.split(':');
        this.options.user = auth[0];
        this.options.password = auth[1];
      }
      for (k in parsed.query) {
        this.options[k] = parsed.query[k];
      }
      if (typeof this.options.adapter !== 'string' || this.options.adapter.length === 0) {
        err = new Error('adapter must be a not empty string');
        err.code = 'BAD_ADAPTER';
        throw err;
      }
      properties = ['name'];
      for (_i = 0, _len = properties.length; _i < _len; _i++) {
        prop = properties[_i];
        if (typeof options[prop] !== 'undefined') {
          this.options[prop] = options[prop];
        }
      }
      if (GenericUtil.isNumeric(this.options.maxConnection)) {
        this.options.maxConnection = parseInt(this.options.maxConnection, 10);
      } else {
        this.options.maxConnection = defaultOptions.maxConnection;
      }
      if (GenericUtil.isNumeric(this.options.minConnection)) {
        this.options.minConnection = parseInt(this.options.minConnection, 10);
      } else {
        this.options.minConnection = defaultOptions.minConnection;
      }
      if (GenericUtil.isNumeric(this.options.idleTimeout)) {
        this.options.idleTimeout = parseInt(this.options.idleTimeout, 10);
      } else {
        this.options.idleTimeout = defaultOptions.idleTimeout;
      }
      this.adapter = internal.getAdapter(this.options);
      GenericPool = require('generic-pool');
      this.pool = GenericPool.Pool({
        name: this.options.name,
        create: (function(_this) {
          return function(callback) {
            logger.debug("create " + _this.options.name);
            _this.adapter.createConnection(_this.options, callback);
          };
        })(this),
        destroy: (function(_this) {
          return function(client) {
            logger.debug("destroy " + _this.options.name);
            client.end();
          };
        })(this),
        max: this.options.maxConnection,
        min: this.options.minConnection,
        idleTimeoutMillis: this.options.idleTimeout * 1000
      });
      for (method in this.pool) {

        /* istanbul ignore if */
        if (typeof this.pool[method] !== 'function') {
          continue;
        }
        this[method] = (function(pool, method) {
          return (function(_this) {
            return function() {
              return pool[method].apply(pool, arguments);
            };
          })(this);
        })(this.pool, method);
      }
      if (typeof next === 'function') {
        this.check(next);
      }
      return;
    }

    AdapterPool.prototype.check = function(next) {
      this.pool.acquire((function(_this) {
        return function(err, connection) {
          if (err) {
            throw err;
          }
          _this.pool.release(connection);
          if ('function' === typeof next) {
            return next();
          }
        };
      })(this));
    };

    AdapterPool.prototype.getDialect = function() {
      return this.options.adapter;
    };

    AdapterPool.prototype.createConnector = function(options) {
      var Connector;
      Connector = require('./Connector');
      return new Connector(this, options);
    };

    AdapterPool.prototype.getMaxConnection = function() {
      return this.options.maxConnection;
    };

    return AdapterPool;

  })();

}).call(this);
